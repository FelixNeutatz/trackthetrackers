/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.ssc.trackthetrackers.extraction.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-12-7")
public class ParsedPage implements org.apache.thrift.TBase<ParsedPage, ParsedPage._Fields>, java.io.Serializable, Cloneable, Comparable<ParsedPage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ParsedPage");

  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ARCHIVE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("archiveTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SCRIPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("scripts", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField IFRAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("iframes", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField LINKS_FIELD_DESC = new org.apache.thrift.protocol.TField("links", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("images", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ParsedPageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ParsedPageTupleSchemeFactory());
  }

  public String url; // required
  public long archiveTime; // required
  public List<String> scripts; // required
  public List<String> iframes; // required
  public List<String> links; // required
  public List<String> images; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    URL((short)1, "url"),
    ARCHIVE_TIME((short)2, "archiveTime"),
    SCRIPTS((short)3, "scripts"),
    IFRAMES((short)4, "iframes"),
    LINKS((short)5, "links"),
    IMAGES((short)6, "images");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // URL
          return URL;
        case 2: // ARCHIVE_TIME
          return ARCHIVE_TIME;
        case 3: // SCRIPTS
          return SCRIPTS;
        case 4: // IFRAMES
          return IFRAMES;
        case 5: // LINKS
          return LINKS;
        case 6: // IMAGES
          return IMAGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ARCHIVETIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARCHIVE_TIME, new org.apache.thrift.meta_data.FieldMetaData("archiveTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCRIPTS, new org.apache.thrift.meta_data.FieldMetaData("scripts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IFRAMES, new org.apache.thrift.meta_data.FieldMetaData("iframes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LINKS, new org.apache.thrift.meta_data.FieldMetaData("links", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IMAGES, new org.apache.thrift.meta_data.FieldMetaData("images", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ParsedPage.class, metaDataMap);
  }

  public ParsedPage() {
  }

  public ParsedPage(
    String url,
    long archiveTime,
    List<String> scripts,
    List<String> iframes,
    List<String> links,
    List<String> images)
  {
    this();
    this.url = url;
    this.archiveTime = archiveTime;
    setArchiveTimeIsSet(true);
    this.scripts = scripts;
    this.iframes = iframes;
    this.links = links;
    this.images = images;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ParsedPage(ParsedPage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.archiveTime = other.archiveTime;
    if (other.isSetScripts()) {
      List<String> __this__scripts = new ArrayList<String>(other.scripts);
      this.scripts = __this__scripts;
    }
    if (other.isSetIframes()) {
      List<String> __this__iframes = new ArrayList<String>(other.iframes);
      this.iframes = __this__iframes;
    }
    if (other.isSetLinks()) {
      List<String> __this__links = new ArrayList<String>(other.links);
      this.links = __this__links;
    }
    if (other.isSetImages()) {
      List<String> __this__images = new ArrayList<String>(other.images);
      this.images = __this__images;
    }
  }

  public ParsedPage deepCopy() {
    return new ParsedPage(this);
  }

  @Override
  public void clear() {
    this.url = null;
    setArchiveTimeIsSet(false);
    this.archiveTime = 0;
    this.scripts = null;
    this.iframes = null;
    this.links = null;
    this.images = null;
  }

  public String getUrl() {
    return this.url;
  }

  public ParsedPage setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public long getArchiveTime() {
    return this.archiveTime;
  }

  public ParsedPage setArchiveTime(long archiveTime) {
    this.archiveTime = archiveTime;
    setArchiveTimeIsSet(true);
    return this;
  }

  public void unsetArchiveTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVETIME_ISSET_ID);
  }

  /** Returns true if field archiveTime is set (has been assigned a value) and false otherwise */
  public boolean isSetArchiveTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ARCHIVETIME_ISSET_ID);
  }

  public void setArchiveTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVETIME_ISSET_ID, value);
  }

  public int getScriptsSize() {
    return (this.scripts == null) ? 0 : this.scripts.size();
  }

  public java.util.Iterator<String> getScriptsIterator() {
    return (this.scripts == null) ? null : this.scripts.iterator();
  }

  public void addToScripts(String elem) {
    if (this.scripts == null) {
      this.scripts = new ArrayList<String>();
    }
    this.scripts.add(elem);
  }

  public List<String> getScripts() {
    return this.scripts;
  }

  public ParsedPage setScripts(List<String> scripts) {
    this.scripts = scripts;
    return this;
  }

  public void unsetScripts() {
    this.scripts = null;
  }

  /** Returns true if field scripts is set (has been assigned a value) and false otherwise */
  public boolean isSetScripts() {
    return this.scripts != null;
  }

  public void setScriptsIsSet(boolean value) {
    if (!value) {
      this.scripts = null;
    }
  }

  public int getIframesSize() {
    return (this.iframes == null) ? 0 : this.iframes.size();
  }

  public java.util.Iterator<String> getIframesIterator() {
    return (this.iframes == null) ? null : this.iframes.iterator();
  }

  public void addToIframes(String elem) {
    if (this.iframes == null) {
      this.iframes = new ArrayList<String>();
    }
    this.iframes.add(elem);
  }

  public List<String> getIframes() {
    return this.iframes;
  }

  public ParsedPage setIframes(List<String> iframes) {
    this.iframes = iframes;
    return this;
  }

  public void unsetIframes() {
    this.iframes = null;
  }

  /** Returns true if field iframes is set (has been assigned a value) and false otherwise */
  public boolean isSetIframes() {
    return this.iframes != null;
  }

  public void setIframesIsSet(boolean value) {
    if (!value) {
      this.iframes = null;
    }
  }

  public int getLinksSize() {
    return (this.links == null) ? 0 : this.links.size();
  }

  public java.util.Iterator<String> getLinksIterator() {
    return (this.links == null) ? null : this.links.iterator();
  }

  public void addToLinks(String elem) {
    if (this.links == null) {
      this.links = new ArrayList<String>();
    }
    this.links.add(elem);
  }

  public List<String> getLinks() {
    return this.links;
  }

  public ParsedPage setLinks(List<String> links) {
    this.links = links;
    return this;
  }

  public void unsetLinks() {
    this.links = null;
  }

  /** Returns true if field links is set (has been assigned a value) and false otherwise */
  public boolean isSetLinks() {
    return this.links != null;
  }

  public void setLinksIsSet(boolean value) {
    if (!value) {
      this.links = null;
    }
  }

  public int getImagesSize() {
    return (this.images == null) ? 0 : this.images.size();
  }

  public java.util.Iterator<String> getImagesIterator() {
    return (this.images == null) ? null : this.images.iterator();
  }

  public void addToImages(String elem) {
    if (this.images == null) {
      this.images = new ArrayList<String>();
    }
    this.images.add(elem);
  }

  public List<String> getImages() {
    return this.images;
  }

  public ParsedPage setImages(List<String> images) {
    this.images = images;
    return this;
  }

  public void unsetImages() {
    this.images = null;
  }

  /** Returns true if field images is set (has been assigned a value) and false otherwise */
  public boolean isSetImages() {
    return this.images != null;
  }

  public void setImagesIsSet(boolean value) {
    if (!value) {
      this.images = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case ARCHIVE_TIME:
      if (value == null) {
        unsetArchiveTime();
      } else {
        setArchiveTime((Long)value);
      }
      break;

    case SCRIPTS:
      if (value == null) {
        unsetScripts();
      } else {
        setScripts((List<String>)value);
      }
      break;

    case IFRAMES:
      if (value == null) {
        unsetIframes();
      } else {
        setIframes((List<String>)value);
      }
      break;

    case LINKS:
      if (value == null) {
        unsetLinks();
      } else {
        setLinks((List<String>)value);
      }
      break;

    case IMAGES:
      if (value == null) {
        unsetImages();
      } else {
        setImages((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case URL:
      return getUrl();

    case ARCHIVE_TIME:
      return Long.valueOf(getArchiveTime());

    case SCRIPTS:
      return getScripts();

    case IFRAMES:
      return getIframes();

    case LINKS:
      return getLinks();

    case IMAGES:
      return getImages();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case URL:
      return isSetUrl();
    case ARCHIVE_TIME:
      return isSetArchiveTime();
    case SCRIPTS:
      return isSetScripts();
    case IFRAMES:
      return isSetIframes();
    case LINKS:
      return isSetLinks();
    case IMAGES:
      return isSetImages();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ParsedPage)
      return this.equals((ParsedPage)that);
    return false;
  }

  public boolean equals(ParsedPage that) {
    if (that == null)
      return false;

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_archiveTime = true;
    boolean that_present_archiveTime = true;
    if (this_present_archiveTime || that_present_archiveTime) {
      if (!(this_present_archiveTime && that_present_archiveTime))
        return false;
      if (this.archiveTime != that.archiveTime)
        return false;
    }

    boolean this_present_scripts = true && this.isSetScripts();
    boolean that_present_scripts = true && that.isSetScripts();
    if (this_present_scripts || that_present_scripts) {
      if (!(this_present_scripts && that_present_scripts))
        return false;
      if (!this.scripts.equals(that.scripts))
        return false;
    }

    boolean this_present_iframes = true && this.isSetIframes();
    boolean that_present_iframes = true && that.isSetIframes();
    if (this_present_iframes || that_present_iframes) {
      if (!(this_present_iframes && that_present_iframes))
        return false;
      if (!this.iframes.equals(that.iframes))
        return false;
    }

    boolean this_present_links = true && this.isSetLinks();
    boolean that_present_links = true && that.isSetLinks();
    if (this_present_links || that_present_links) {
      if (!(this_present_links && that_present_links))
        return false;
      if (!this.links.equals(that.links))
        return false;
    }

    boolean this_present_images = true && this.isSetImages();
    boolean that_present_images = true && that.isSetImages();
    if (this_present_images || that_present_images) {
      if (!(this_present_images && that_present_images))
        return false;
      if (!this.images.equals(that.images))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_url = true && (isSetUrl());
    list.add(present_url);
    if (present_url)
      list.add(url);

    boolean present_archiveTime = true;
    list.add(present_archiveTime);
    if (present_archiveTime)
      list.add(archiveTime);

    boolean present_scripts = true && (isSetScripts());
    list.add(present_scripts);
    if (present_scripts)
      list.add(scripts);

    boolean present_iframes = true && (isSetIframes());
    list.add(present_iframes);
    if (present_iframes)
      list.add(iframes);

    boolean present_links = true && (isSetLinks());
    list.add(present_links);
    if (present_links)
      list.add(links);

    boolean present_images = true && (isSetImages());
    list.add(present_images);
    if (present_images)
      list.add(images);

    return list.hashCode();
  }

  @Override
  public int compareTo(ParsedPage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchiveTime()).compareTo(other.isSetArchiveTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchiveTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archiveTime, other.archiveTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScripts()).compareTo(other.isSetScripts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScripts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scripts, other.scripts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIframes()).compareTo(other.isSetIframes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIframes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iframes, other.iframes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinks()).compareTo(other.isSetLinks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.links, other.links);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImages()).compareTo(other.isSetImages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.images, other.images);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ParsedPage(");
    boolean first = true;

    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("archiveTime:");
    sb.append(this.archiveTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("scripts:");
    if (this.scripts == null) {
      sb.append("null");
    } else {
      sb.append(this.scripts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iframes:");
    if (this.iframes == null) {
      sb.append("null");
    } else {
      sb.append(this.iframes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("links:");
    if (this.links == null) {
      sb.append("null");
    } else {
      sb.append(this.links);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("images:");
    if (this.images == null) {
      sb.append("null");
    } else {
      sb.append(this.images);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (url == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'url' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'archiveTime' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ParsedPageStandardSchemeFactory implements SchemeFactory {
    public ParsedPageStandardScheme getScheme() {
      return new ParsedPageStandardScheme();
    }
  }

  private static class ParsedPageStandardScheme extends StandardScheme<ParsedPage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ParsedPage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARCHIVE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.archiveTime = iprot.readI64();
              struct.setArchiveTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCRIPTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.scripts = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.scripts.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setScriptsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IFRAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.iframes = new ArrayList<String>(_list3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.iframes.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setIframesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LINKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.links = new ArrayList<String>(_list6.size);
                String _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readString();
                  struct.links.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setLinksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IMAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.images = new ArrayList<String>(_list9.size);
                String _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = iprot.readString();
                  struct.images.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setImagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetArchiveTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'archiveTime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ParsedPage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ARCHIVE_TIME_FIELD_DESC);
      oprot.writeI64(struct.archiveTime);
      oprot.writeFieldEnd();
      if (struct.scripts != null) {
        oprot.writeFieldBegin(SCRIPTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.scripts.size()));
          for (String _iter12 : struct.scripts)
          {
            oprot.writeString(_iter12);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.iframes != null) {
        oprot.writeFieldBegin(IFRAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.iframes.size()));
          for (String _iter13 : struct.iframes)
          {
            oprot.writeString(_iter13);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.links != null) {
        oprot.writeFieldBegin(LINKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.links.size()));
          for (String _iter14 : struct.links)
          {
            oprot.writeString(_iter14);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.images != null) {
        oprot.writeFieldBegin(IMAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.images.size()));
          for (String _iter15 : struct.images)
          {
            oprot.writeString(_iter15);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ParsedPageTupleSchemeFactory implements SchemeFactory {
    public ParsedPageTupleScheme getScheme() {
      return new ParsedPageTupleScheme();
    }
  }

  private static class ParsedPageTupleScheme extends TupleScheme<ParsedPage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ParsedPage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.url);
      oprot.writeI64(struct.archiveTime);
      BitSet optionals = new BitSet();
      if (struct.isSetScripts()) {
        optionals.set(0);
      }
      if (struct.isSetIframes()) {
        optionals.set(1);
      }
      if (struct.isSetLinks()) {
        optionals.set(2);
      }
      if (struct.isSetImages()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetScripts()) {
        {
          oprot.writeI32(struct.scripts.size());
          for (String _iter16 : struct.scripts)
          {
            oprot.writeString(_iter16);
          }
        }
      }
      if (struct.isSetIframes()) {
        {
          oprot.writeI32(struct.iframes.size());
          for (String _iter17 : struct.iframes)
          {
            oprot.writeString(_iter17);
          }
        }
      }
      if (struct.isSetLinks()) {
        {
          oprot.writeI32(struct.links.size());
          for (String _iter18 : struct.links)
          {
            oprot.writeString(_iter18);
          }
        }
      }
      if (struct.isSetImages()) {
        {
          oprot.writeI32(struct.images.size());
          for (String _iter19 : struct.images)
          {
            oprot.writeString(_iter19);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ParsedPage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.url = iprot.readString();
      struct.setUrlIsSet(true);
      struct.archiveTime = iprot.readI64();
      struct.setArchiveTimeIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.scripts = new ArrayList<String>(_list20.size);
          String _elem21;
          for (int _i22 = 0; _i22 < _list20.size; ++_i22)
          {
            _elem21 = iprot.readString();
            struct.scripts.add(_elem21);
          }
        }
        struct.setScriptsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.iframes = new ArrayList<String>(_list23.size);
          String _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = iprot.readString();
            struct.iframes.add(_elem24);
          }
        }
        struct.setIframesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.links = new ArrayList<String>(_list26.size);
          String _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = iprot.readString();
            struct.links.add(_elem27);
          }
        }
        struct.setLinksIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.images = new ArrayList<String>(_list29.size);
          String _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readString();
            struct.images.add(_elem30);
          }
        }
        struct.setImagesIsSet(true);
      }
    }
  }

}

